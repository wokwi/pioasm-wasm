/*
 * pioasm-wasm test code
 */

import assert from 'assert';
import { PIOAssembler } from './pioasm.js';

const testInput = `
  .program blink
  pull block
  out y, 32
`;

const expectedOutput = `# -------------------------------------------------- #
# This file is autogenerated by pioasm; do not edit! #
# -------------------------------------------------- #

import rp2
from machine import Pin
# ----- #
# blink #
# ----- #

@rp2.asm_pio()
def blink():
    wrap_target()
    pull(block)                           # 0
    out(y, 32)                            # 1
    wrap()

`;

const badProgram = `
.program bad
  jmp unknown
`;

async function main() {
  const pioasm = new PIOAssembler();

  assert.deepStrictEqual(await pioasm.assemble(testInput, 'python'), {
    output: expectedOutput,
    exitCode: 0,
  });

  assert.deepStrictEqual(await pioasm.assemble(testInput, 'hex'), {
    output: '80a0\n6040',
    exitCode: 0,
  });

  assert.deepStrictEqual(await pioasm.assemble(badProgram, 'c-sdk'), {
    output: `input.pio:3.7-13: undefined symbol 'unknown'
    3 |   jmp unknown
      |       ^~~~~~~`,
    exitCode: 1,
  });

  console.log('Test passed successfully!');
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
